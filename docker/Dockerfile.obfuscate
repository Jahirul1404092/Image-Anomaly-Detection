################## Base Image: python-slim ##################
FROM python:3.8.16 AS base
LABEL MAINTAINER="Chowagiken"

# ENV SET    
ENV TZ=Asia/Tokyo \
    DEBIAN_FRONTEND=noninteractive

# Update system and install relevant packages
RUN apt-get update && apt-get -yq install --no-install-recommends \
    curl \
    openjdk-17-jre-headless=17.0.6+10-1~deb11u1 \
    sudo && \
    apt-get autoremove && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*
##############################################################


################## Build Image: install-deps ##################
FROM base AS builder
WORKDIR /app

# ENV SET    
ENV LC_ALL=C.UTF-8 \
    LANG=C.UTF-8 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONFAULTHANDLER=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONHASHSEED=random \
    PIP_NO_CACHE_DIR=off \
    PIP_DISABLE_PIP_VERSION_CHECK=on \
    POETRY_VIRTUALENVS_IN_PROJECT=true \
    PIP_DEFAULT_TIMEOUT=100 \
    POETRY_NO_INTERACTION=1 \
    POETRY_VERSION=1.3.2

# Install Poetry
ENV POETRY_HOME=/etc/poetry
RUN curl -sSL https://install.python-poetry.org | python3 -
ENV PATH="$POETRY_HOME/bin:$PATH"

# Install project dependencies
RUN python3 -m venv .venv
COPY poetry.lock pyproject.toml ./
RUN . .venv/bin/activate && \
    # nvidia cuda toolkit
    pip install nvidia-cuda-nvrtc-cu11 && \
    poetry install \
        --without dev,docs,test,api \
        --no-interaction \
        --no-ansi \
        --no-root && \
    # install only headless version of opencv
    pip uninstall -y opencv-python opencv-python-headless && \
    pip install opencv-python-headless==4.7.0.72

# Install additional development dependencies
ADD docker/install.sh ./
ARG INSTALL_GROUPS
ENV INSTALL_GROUPS=${INSTALL_GROUPS:-api}
ENV VENV_PATH="/app/.venv"
RUN ./install.sh
###############################################################


################## Obfuscation Image: obfuscate code ##################
# use heavier image
FROM python:3.8.16 AS code
WORKDIR /app
ENV BUILD_FOLDER=build
ENV FINAL_FOLDER=code
# prepare files
COPY hamacho ./${BUILD_FOLDER}/hamacho
COPY api ./${BUILD_FOLDER}/api
RUN rm -rf ./${BUILD_FOLDER}/api/grpc \
           ./${BUILD_FOLDER}/hamacho/demo_inference.py \
           ./${BUILD_FOLDER}/api/tests && \
    mv ./${BUILD_FOLDER}/api/setup.py ./${BUILD_FOLDER}/
RUN pip install cython==0.29.33
# build
RUN cd ./${BUILD_FOLDER} && python setup.py bdist_wheel
RUN mkdir ${FINAL_FOLDER}
# extract
RUN unzip ./${BUILD_FOLDER}/dist/app-1.0.0-cp38-cp38-linux_x86_64.whl \
        -d /app/${FINAL_FOLDER}
RUN rm -rf ./${FINAL_FOLDER}/app-1.0.0.dist-info

WORKDIR /app/${FINAL_FOLDER}
# remove all py files
RUN find . -type f -name '*.py' -delete
# remove all __pycache__ folders
RUN find . -type d -name __pycache__ -prune -exec rm -r {} \;
# copy non-python files
COPY hamacho/plug_in/models/patchcore/config.yaml hamacho/plug_in/models/patchcore/
COPY hamacho/plug_in/models/padim/config.yaml hamacho/plug_in/models/padim/
COPY hamacho/fonts/ hamacho/fonts/
COPY hamacho/core/utils/profilers/custom_profiling/ hamacho/core/utils/profilers/custom_profiling/
COPY api/config.yaml api/
###############################################################


################## Backbone Image: cache backbone ##################
FROM base AS backbone
WORKDIR /app

# Set default directory to save/load pytorch checkpoints 
ENV TORCH_HOME="/app/.torch"
ADD docker/download_torch_checkpoints.sh ./
RUN ./download_torch_checkpoints.sh

################## Final Runtime Image ##################
FROM base AS runtime
WORKDIR /app/
# Copy Poetry environment
COPY --from=builder /app/.venv ./.venv
# Update PATH
ENV PATH="/app/.venv/bin:$PATH"
# Copy backbone
ENV TORCH_HOME="/app/.torch"
COPY --from=backbone /app/.torch ./.torch
# Copy code files
COPY --from=code /app/code/ ./
# Copy licensed entypoint
COPY obfuscated/ ./obfuscated/
ENV OBFUSCATED_VERIFIER_DUMMY_DIR=/app/obfuscated
# Set license path
ENV PYARMOR_LICENSE=/license/license.lic
# add command that uses the $PORT set by env var at container startup
CMD gunicorn --log-level=debug --bind 0.0.0.0:$PORT --threads 8 --timeout 0 api.api:app
###############################################################
